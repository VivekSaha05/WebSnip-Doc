{
  "Connect To DataBase": {
    "prefix": "conntodb",
    "body": [
      "// Importing mongoose",
      "",
      "const mongoose = require('mongoose');",
      "",
      "// creating a function for conencting to database and exporting it",
      "// In your environment file define the database uri as DBURI",
      "",
      "exports.connectToDB = () => {",
      "  mongoose.connect(`${process.env.DBURI}`).then(() => {",
      "    console.log('Connected to the database');",
      "  }).catch((err) => console.log('Some error has occurred!'));",
      "};",
      "",
      "// Now you can require the file and call the function. Happy Hacking!!!"
    ],
    "description": "Connect to MongoDB using Mongoose"
  },
  "Initialize Express-EJS Server": {
    "prefix": "ejsinitserver",
    "body": [
      "// Importing the necessary modules",
      "const express = require('express');",
      "const path = require('path');",
      "const bodyparser = require('body-parser');",
      "const app = express();",
      "",
      "// Initializing the environment variables",
      "require('dotenv').config();",
      "",
      "// Connecting to the database",
      "require('./config/db').connectToDB();",
      "",
      "// Setting up the view engine",
      "app.set('view engine', 'ejs');",
      "",
      "// Adding the middlewares",
      "app.use(express.json());",
      "app.use(bodyparser.urlencoded({ extended: false }));",
      "",
      "// Serving up the static files",
      "app.use(express.static(path.join(__dirname, 'public')));",
      "",
      "// Setting up the routes",
      "app.use(require('./routes/routes'));",
      "",
      "// Listening to the port, define the PORT environment variable in the env file",
      "app.listen(process.env.PORT, () => console.log(`Server running on port ${process.env.PORT}`));",
      "",
      "// Now your server is ready, Happy Hacking!!!"
    ],
    "description": "Initialize an Express server for ejs implementation"
  },
  "Intialize Express-React Server": {
    "prefix": "reactinitserver",
    "body": [
      "// Importing required modules",
      "const express = require('express');",
      "const app = express();",
      "const path = require('path');",
      "const cors = require('cors');",
      "const bodyparser = require('body-parser');",
      "",
      "// Initializing the environment variables",
      "require('dotenv').config();",
      "",
      "// Connecting to the database",
      "require('./config/connectDB').connectToDB();",
      "",
      "// Adding the middlewares",
      "app.use(express.json());",
      "app.use(bodyparser.urlencoded({ extended: false }));",
      "",
      "// Serving up the static files",
      "app.use(express.static(path.join(__dirname, 'public')));",
      "",
      "// Setting up cors for React (open for all ports, adjust as needed)",
      "app.use(cors());",
      "",
      "// Setting up the routes",
      "const routes = require('./routes/routes');",
      "app.use('/', routes);",
      "",
      "// Listening on the port (define PORT in the env file)",
      "app.listen(process.env.PORT, () => console.log(`Server running on port ${process.env.PORT}`));",
      "",
      "// Your server is ready, Happy Hacking!!!"
    ],
    "description": "Initialize an Express server for React JS"
  },
  "Mongoose User Model": {
    "prefix": "usermodel",
    "body": [
      "// Importing the required modules",
      "const mongoose = require(\"mongoose\");",
      "",
      "// Defining a schema for the 'users' model",
      "const userSchema = new mongoose.Schema(",
      "  {",
      "    firstName: {",
      "      type: String,",
      "      required: true,",
      "    },",
      "    lastName: {",
      "      type: String,",
      "      required: true,",
      "    },",
      "    password: {",
      "      type: String,",
      "      required: true,",
      "    },",
      "    email: {",
      "      type: String,",
      "      required: true,",
      "    },",
      "    mobile: {",
      "      type: String,",
      "    },",
      "    address: {",
      "      type: String,",
      "      required: true,",
      "    },",
      "    // Add or remove fields as needed for your application",
      "  },",
      "  { timestamps: true } // Adding timestamps",
      ");",
      "",
      "// Converting the schema into a model and exporting it",
      "module.exports = mongoose.model(\"users\", userSchema);"
    ],
    "description": "Creates a Mongoose model for a user"
  },
  "Express Router": {
    "prefix": "expressrouter",
    "body": [
      "// Importing the Express module and creating a router object",
      "const router = require(\"express\").Router();",
      "",
      "// Add your routes below this comment",
      "",
      "// Example route",
      "router.get(\"/\", (req, res) => {",
      "  res.send(\"Hello, Express!\");",
      "});",
      "",
      "// Exporting the router object",
      "module.exports = router;"
    ],
    "description": "Creates an Express router object"
  },
  "JWT Token Generator": {
    "prefix": "jwtgen",
    "body": [
      "// Importing the JWT module",
      "const jwt = require(\"jsonwebtoken\");",
      "",
      "// Fetching the secret key from the environment file",
      "const key = process.env.JWT_SECRET;",
      "",
      "// Function to generate a JWT token",
      "exports.genToken = async (userId) => {",
      "  // Sign the userId using the secret key, set expiration to 48 hours",
      "  const token = jwt.sign({ userId }, key, {",
      "    expiresIn: \"48h\",",
      "  });",
      "",
      "  // Returning the generated token",
      "  return token;",
      "};"
    ],
    "description": "Creates a JWT token generation function"
  },
  "Bcrypt Functions": {
    "prefix": "bcrypt",
    "body": [
      "// Importing the bcryptjs module",
      "const bcrypt = require(\"bcryptjs\");",
      "",
      "// Function to hash a password",
      "exports.encode = async (password) => {",
      "  // Return the hashed password",
      "  return bcrypt.hash(password, 7);",
      "};",
      "",
      "// Function to compare a password with its hash",
      "exports.decode = async (inputPassword, hashedPassword) => {",
      "  // Return true if the passwords match, false otherwise",
      "  return bcrypt.compare(inputPassword, hashedPassword);",
      "};"
    ],
    "description": "Creates functions for password hashing and comparison using bcrypt"
  },
  "Nodemailer Mail Sending Function": {
    "prefix": "sendmail",
    "body": [
      "// Importing the Nodemailer module",
      "const nodemailer = require(\"nodemailer\");",
      "",
      "// Function to send emails",
      "exports.mailsend = async (emailObject) => {",
      "  // Create a transporter using Gmail service",
      "  const transporter = nodemailer.createTransport({",
      "    service: \"gmail\",",
      "    auth: {",
      "      user: process.env.USER, // Email from which the mail is to be sent",
      "      pass: process.env.PASSWORD,",
      "    },",
      "  });",
      "",
      "  // Sending the email",
      "  const info = await transporter.sendMail({",
      "    from: process.env.USER,",
      "    to: `${emailObject.user}`, // Receiver's email",
      "    subject: \"\", // Subject",
      "    text: `${emailObject.data}`, // Data to be sent",
      "  });",
      "",
      "  // Log the message ID",
      "  console.log(info.messageId);",
      "};"
    ],
    "description": "Creates a function to send emails using Nodemailer"
  },
  "OTP Code Generator": {
    "prefix": "otpgen",
    "body": [
      "// Function to generate OTP and export it",
      "exports.otpcode = () => {",
      "  // Return a random 4-digit OTP",
      "  return Math.floor(Math.random() * 10000 + 1);",
      "};"
    ],
    "description": "Creates a function to generate OTP"
  },
  "Mongoose Student Model": {
    "prefix": "studentmodel",
    "body": [
      "// Importing the Mongoose module",
      "const mongoose = require(\"mongoose\");",
      "",
      "// Defining a schema for the 'STUDENT' model",
      "const studentsData = mongoose.Schema({",
      "  name: {",
      "    type: String,",
      "    required: true,",
      "  },",
      "  rollno: {",
      "    type: String,",
      "    required: true,",
      "    unique: true,",
      "  },",
      "  gender: {",
      "    type: String,",
      "    required: true,",
      "  },",
      "  batch: {",
      "    type: String,",
      "    required: true,",
      "  },",
      "  email: {",
      "    type: String,",
      "    required: true,",
      "    unique: true,",
      "  },",
      "  password: {",
      "    type: String,",
      "    required: true,",
      "  },",
      "});",
      "",
      "// Converting the schema into a model and exporting it",
      "module.exports = mongoose.model(\"STUDENT\", studentsData);"
    ],
    "description": "Creates a Mongoose model for a student"
  },
  "JWT Authentication Middleware": {
    "prefix": "cookieauth",
    "body": [
      "// Importing the JWT module",
      "const jwt = require(\"jsonwebtoken\");",
      "",
      "// Middleware to check if the user is authenticated",
      "exports.isAuth = async (req, res, next) => {",
      "  // Check if the request contains a token in the cookie",
      "  let cookie = req.headers.cookie;",
      "  if (!cookie || !cookie.includes(\"token\")) {",
      "    // Render the login page with an error message if the token is not present",
      "    return res.render(\"Login\", {",
      "      message: \"You are not Authorized\",",
      "      email: \"\",",
      "    });",
      "  }",
      "",
      "  // Extract the token from the cookie",
      "  let token = cookie.split(\"token=\")[1];",
      "",
      "  // Verify the token using the secret key",
      "  jwt.verify(token, process.env.SECRETKEY, (err, user) => {",
      "    if (err) {",
      "      // Render the login page with an error message if the token is invalid or expired",
      "      return res.render(\"Login\", {",
      "        message: \"Session expired, Login Again\",",
      "        email: \"\",",
      "      });",
      "    }",
      "",
      "    // Attach the user information to the request object",
      "    req.user = user;",
      "    console.log(req.user.email);",
      "",
      "    // Move to the next middleware or route handler",
      "    next();",
      "  });",
      "};"
    ],
    "description": "Creates a JWT authentication middleware"
  },
  "Student Registration Controller Action": {
    "prefix": "studentregisteraction",
    "body": [
      "// Importing the Student model and the hasher utility",
      "const Student = require(\"../model/student\");",
      "const hasher = require(\"../utils/hasher\");",
      "",
      "// Controller action to handle student registration",
      "exports.ActionRegister = async (req, res) => {",
      "  try {",
      "    // Destructuring the request body",
      "    const { name, rollno, gender, batch, email, password } = req.body;",
      "",
      "    // Checking if all required fields are present",
      "    if (!name || !rollno || !gender || !batch || !email || !password) {",
      "      return res.render(\"register\", {",
      "        message: \"Please fill all details\",",
      "      });",
      "    } else {",
      "      // Creating a new student record in the database",
      "      await Student.create({",
      "        name,",
      "        rollno,",
      "        gender,",
      "        batch,",
      "        email,",
      "        password: await hasher.encode(password), // Hashing the password",
      "        status: \"INACTIVE\",",
      "      });",
      "",
      "      // Rendering the login page with a success message",
      "      return res.render(\"login\", {",
      "        message: \"Account Registered, Please Login\",",
      "        email,",
      "      });",
      "    }",
      "  } catch (e) {",
      "    console.log(`Error is ${e}`);",
      "    // Rendering the register page with an error message",
      "    return res.render(\"register\", {",
      "      message: \"Account already registered. Please Login!!\",",
      "    });",
      "  }",
      "};"
    ],
    "description": "Creates a controller action for student registration"
  },
  "User Login Controller Action": {
    "prefix": "studentlogin",
    "body": [
      "// Importing required modules and utilities",
      "const Student = require(\"../model/student\");",
      "const hasher = require(\"../utils/hasher\");",
      "const tokenGen = require(\"../utils/genToken\");",
      "",
      "// Controller action to handle user login",
      "exports.postLogin = async (req, res) => {",
      "  // Destructuring email and password from the request body",
      "  const { email, password } = req.body;",
      "  console.log(req.body);",
      "",
      "  try {",
      "    // Finding a user with the provided email",
      "    const user = await Student.findOne({ email: email });",
      "",
      "    // Check if the user exists",
      "    if (!user) {",
      "      return res.render(\"login\", {",
      "        message: \"Account not found!\",",
      "        email,",
      "      });",
      "    } else {",
      "      // Check if the entered password matches the hashed password in the database",
      "      if (await hasher.decode(password, user.password)) {",
      "        // Check if the user account is active",
      "        if (user.status === \"ACTIVE\") {",
      "          // Generate a JWT token for the user",
      "          const token = await tokenGen.genToken({",
      "            email: user.email,",
      "          });",
      "",
      "          // Set the token in a cookie",
      "          res.cookie(\"token\", token);",
      "",
      "          // Redirect to the home page",
      "          return res.redirect(\"/\");",
      "        } else {",
      "          return res.render(\"login\", {",
      "            message: \"Account Not Activated\",",
      "            email,",
      "          });",
      "        }",
      "      } else {",
      "        return res.render(\"login\", {",
      "          message: \"Invalid email or password\",",
      "          email,",
      "        });",
      "      }",
      "    }",
      "  } catch (e) {",
      "    console.log(e);",
      "    console.log(`Some error occurred ${e}`);",
      "",
      "    // Render the login page with an error message",
      "    return res.render(\"login\", {",
      "      message: \"Some error occurred, Please try again\",",
      "      email,",
      "    });",
      "  }",
      "};"
    ],
    "description": "Creates a controller action for user login"
  },
  "OTP Verification Controller Actions": {
    "prefix": "otpactions",
    "body": [
      "// Importing required modules and utilities",
      "const OtpGen = require(\"../utils/otps\");",
      "const mailer = require(\"../utils/mailer\");",
      "const OtpData = require(\"../model/otp\");",
      "const Student = require(\"../model/student\");",
      "",
      "// Controller action to render the OTP input page",
      "exports.getOtp = (req, res) => {",
      "  res.render(\"otp\", {",
      "    email: req.params.email,",
      "    message: \"\",",
      "  });",
      "};",
      "",
      "// Controller action to send OTP",
      "exports.sendOtp = async (req, res) => {",
      "  let otp;",
      "  try {",
      "    // Check if OTP data already exists for the email",
      "    let data = await OtpData.findOne({ email: req.params.email });",
      "",
      "    // Generate a new OTP if data doesn't exist",
      "    if (data) {",
      "      otp = data.otp;",
      "    } else {",
      "      otp = OtpGen.otpcode();",
      "      await OtpData.create({",
      "        email: req.params.email,",
      "        otp: otp.toString(),",
      "      });",
      "    }",
      "",
      "    // Send OTP via email",
      "    mailer.sendOtp({",
      "      user: req.params.email,",
      "      otp,",
      "    });",
      "",
      "    // Redirect to the OTP verification page",
      "    return res.redirect(`/verify/${req.params.email}`);",
      "  } catch (error) {",
      "    console.log(`Error is ${error}`);",
      "",
      "    // Render the login page with an error message",
      "    res.render(\"login\", {",
      "      message: \"Some error occurred\",",
      "      email: \"\",",
      "    });",
      "  }",
      "};",
      "",
      "// Controller action to verify OTP",
      "exports.postOtp = async (req, res) => {",
      "  const { val1, val2, val3, val4 } = req.body;",
      "  const email = req.params.email;",
      "  try {",
      "    // Find the OTP data for the given email",
      "    const data = await OtpData.findOne({ email: email });",
      "",
      "    // Check if the entered OTP matches the stored OTP",
      "    if (data.otp === val1 + val2 + val3 + val4) {",
      "      // Update student status to \"ACTIVE\"",
      "      await Student.updateOne({ email: email }, { status: \"ACTIVE\" });",
      "",
      "      // Delete the OTP data from the database",
      "      await OtpData.deleteOne({ email: email });",
      "",
      "      // Render the login page with a success message",
      "      return res.render(\"login\", {",
      "        message: \"Your account is active now.\",",
      "        email,",
      "      });",
      "    } else {",
      "      // Render the OTP input page with an error message",
      "      return res.render(\"otp\", {",
      "        message: \"Invalid OTP.\",",
      "        email,",
      "      });",
      "    }",
      "  } catch (error) {",
      "    console.log(`Error is ${error}`);",
      "",
      "    // Render the login page with an error message",
      "    return res.render(\"login\", {",
      "      message: \"Some error occurred\",",
      "      email,",
      "    });",
      "  }",
      "};"
    ],
    "description": "Creates controller actions for OTP verification"
  }
}
